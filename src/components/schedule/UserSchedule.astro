---
import type { Session, Track } from '../../type'
import Stack from '../ui-elements/Stack.astro'

interface Props {
    tracks: Track[]
    sessions: Session[]
}

const { sessions } = Astro.props

const jsonSessions = JSON.stringify(sessions)
---

<user-schedule data-sessions={jsonSessions}>
    <div class="user-schedule">
        <Stack />
    </div>
</user-schedule>

<script>
    import { getFirestore } from 'firebase/firestore'
    import { doc, getDoc } from 'firebase/firestore'
    import { getAuth, onAuthStateChanged } from 'firebase/auth'
    import type { Session } from '../../type'
    import { app } from '../../firebase/client'

    class UserSchedule extends HTMLElement {
        connectedCallback() {
            const auth = getAuth(app)

            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    const db = getFirestore(app)
                    const userRef = doc(db, 'users', user.uid)
                    const docSnap = await getDoc(userRef)

                    if (docSnap.exists()) {
                        const sessionsIds = docSnap.data().sessions || []
                        const datasetSessions = this.dataset.sessions

                        if (datasetSessions) {
                            const sessions: Session[] = JSON.parse(datasetSessions)
                            const userSessions: Session[] = sessions
                                .filter((session) => sessionsIds.includes(session.id))
                                .sort((a, b) => {
                                    if (!a.dateStart || !b.dateStart) {
                                        return 0
                                    }
                                    return new Date(a.dateStart).getTime() - new Date(b.dateStart).getTime()
                                })

                            this.renderSessions(userSessions)
                        }
                    }
                }
            })
        }

        renderSessions(userSessions: Session[]) {
            const scheduleDiv = this.querySelector('.stack')
            if (scheduleDiv) {
                scheduleDiv.innerHTML = userSessions
                    .map(
                        (session) => `
                    <div class="user-schedule-session">
                        <h3>
                          <a href="/sessions/${session.id}">
                            ${session.title}
                          </a>
                        </h3>
                        <p>${session.dateStart && new Date(session.dateStart).toLocaleString('fr', { dateStyle: 'long', timeStyle: 'short' })} â€“ ${session.durationMinutes} min</p>
                    </div>
                `
                    )
                    .join('')
            }
        }
    }

    customElements.define('user-schedule', UserSchedule)
</script>

<style>
    .user-schedule {
        :global(.user-schedule-session a) {
            color: var(--text);
        }
    }
</style>
